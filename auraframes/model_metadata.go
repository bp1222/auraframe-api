/*
Aura Frame API - Unofficial

Reverse Engineered API for Aura Frames

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auraframes

import (
	"encoding/json"
)

// Metadata struct for Metadata
type Metadata struct {
	Attribution *string `json:"attribution,omitempty"`
	Date *string `json:"date,omitempty"`
	Location *string `json:"location,omitempty"`
	PairReasons *string `json:"pair_reasons,omitempty"`
}

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata() *Metadata {
	this := Metadata{}
	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetAttribution returns the Attribution field value if set, zero value otherwise.
func (o *Metadata) GetAttribution() string {
	if o == nil || o.Attribution == nil {
		var ret string
		return ret
	}
	return *o.Attribution
}

// GetAttributionOk returns a tuple with the Attribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetAttributionOk() (*string, bool) {
	if o == nil || o.Attribution == nil {
		return nil, false
	}
	return o.Attribution, true
}

// HasAttribution returns a boolean if a field has been set.
func (o *Metadata) HasAttribution() bool {
	if o != nil && o.Attribution != nil {
		return true
	}

	return false
}

// SetAttribution gets a reference to the given string and assigns it to the Attribution field.
func (o *Metadata) SetAttribution(v string) {
	o.Attribution = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Metadata) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Metadata) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Metadata) SetDate(v string) {
	o.Date = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Metadata) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Metadata) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Metadata) SetLocation(v string) {
	o.Location = &v
}

// GetPairReasons returns the PairReasons field value if set, zero value otherwise.
func (o *Metadata) GetPairReasons() string {
	if o == nil || o.PairReasons == nil {
		var ret string
		return ret
	}
	return *o.PairReasons
}

// GetPairReasonsOk returns a tuple with the PairReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetPairReasonsOk() (*string, bool) {
	if o == nil || o.PairReasons == nil {
		return nil, false
	}
	return o.PairReasons, true
}

// HasPairReasons returns a boolean if a field has been set.
func (o *Metadata) HasPairReasons() bool {
	if o != nil && o.PairReasons != nil {
		return true
	}

	return false
}

// SetPairReasons gets a reference to the given string and assigns it to the PairReasons field.
func (o *Metadata) SetPairReasons(v string) {
	o.PairReasons = &v
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attribution != nil {
		toSerialize["attribution"] = o.Attribution
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.PairReasons != nil {
		toSerialize["pair_reasons"] = o.PairReasons
	}
	return json.Marshal(toSerialize)
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


