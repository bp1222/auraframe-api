/*
Aura Frame API - Unofficial

Reverse Engineered API for Aura Frames

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auraframes

import (
	"encoding/json"
)

// LoginResponseResult struct for LoginResponseResult
type LoginResponseResult struct {
	CurrentUser *CurrentUser `json:"current_user,omitempty"`
}

// NewLoginResponseResult instantiates a new LoginResponseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginResponseResult() *LoginResponseResult {
	this := LoginResponseResult{}
	return &this
}

// NewLoginResponseResultWithDefaults instantiates a new LoginResponseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginResponseResultWithDefaults() *LoginResponseResult {
	this := LoginResponseResult{}
	return &this
}

// GetCurrentUser returns the CurrentUser field value if set, zero value otherwise.
func (o *LoginResponseResult) GetCurrentUser() CurrentUser {
	if o == nil || o.CurrentUser == nil {
		var ret CurrentUser
		return ret
	}
	return *o.CurrentUser
}

// GetCurrentUserOk returns a tuple with the CurrentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginResponseResult) GetCurrentUserOk() (*CurrentUser, bool) {
	if o == nil || o.CurrentUser == nil {
		return nil, false
	}
	return o.CurrentUser, true
}

// HasCurrentUser returns a boolean if a field has been set.
func (o *LoginResponseResult) HasCurrentUser() bool {
	if o != nil && o.CurrentUser != nil {
		return true
	}

	return false
}

// SetCurrentUser gets a reference to the given CurrentUser and assigns it to the CurrentUser field.
func (o *LoginResponseResult) SetCurrentUser(v CurrentUser) {
	o.CurrentUser = &v
}

func (o LoginResponseResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentUser != nil {
		toSerialize["current_user"] = o.CurrentUser
	}
	return json.Marshal(toSerialize)
}

type NullableLoginResponseResult struct {
	value *LoginResponseResult
	isSet bool
}

func (v NullableLoginResponseResult) Get() *LoginResponseResult {
	return v.value
}

func (v *NullableLoginResponseResult) Set(val *LoginResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponseResult(val *LoginResponseResult) *NullableLoginResponseResult {
	return &NullableLoginResponseResult{value: val, isSet: true}
}

func (v NullableLoginResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


